import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
from sklearn.datasets import load_boston
import warnings
warnings.filterwarnings('ignore')

%matplotlib inline

boston = load_boston()
X_data = boston.data
y_target = boston.target

alphas = [0,0.1,1,10,100]
for alpha in alphas:
  ridge = Ridge(alpha = alpha)
  neg_mse_scores = cross_val_score(ridge, X_data, y_target, scoring="neg_mean_squared_error", cv=5)
  rmse_score = np.sqrt(-1*neg_mse_scores)
  avg_rmse = np.mean(rmse_score)
  print("Alpha : ", alpha)
  print("RMSE_Score : ",np.round(rmse_score,3))
  print("Average RMSE : ", np.round(avg_rmse,3))


# Visuallization features' coefficient value accroding to the change of alpha
import matplotlib.pyplot as plt
import seaborn as sns

X_data = pd.DataFrame(data=boston.data, columns=boston.feature_names)
print(X_data.head(3))

fig, axs = plt.subplots(figsize=(18,6), nrows=1, ncols=5)
coeff_df = pd.DataFrame()
print(type(X_data))

for pos, alpha in enumerate(alphas):
  ridge = Ridge(alpha = alpha)
  ridge.fit(X_data, y_target)
  coeff = pd.Series(data=ridge.coef_, index=X_data.columns)
  colname = "alpha "+ str(alpha)
  coeff_df[colname] = coeff

  coeff = coeff.sort_values(ascending=False)
  axs[pos].set_title(colname)
  axs[pos].set_xlim(-3,6)
  sns.barplot(x=coeff.values, y=coeff.index, ax=axs[pos])
