# 학습용 데이터 및 내용만 추출한다
from sklearn.datasets import fetch_20newsgroups
import pandas as pd
import numpy as np

train_news = fetch_20newsgroups(subset='train', remove=('headers','footers','quotes'),random_state=156)

X_train = train_news.data
y_train = train_news.target

test_news = fetch_20newsgroups(subset='test', remove=('headers','footers','quotes'),random_state=156)

X_test = test_news.data
y_test = test_news.target

# CountVectorizer로 피처 벡터 및 변환을 수행한다

from sklearn.feature_extraction.text import CountVectorizer

cnt_vect = CountVectorizer()
cnt_vect.fit(X_train)
X_train_cnt_vect = cnt_vect.transform(X_train)
X_test_cnt_vect = cnt_vect.transform(X_test)

X_train_cnt_vect.shape

# 로지스틱 회귀를 이용하여 뉴스그룹에 대한 분류를 예측해보기

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings('ignore')

lr_clf = LogisticRegression(solver="liblinear")
lr_clf.fit(X_train_cnt_vect, y_train)
pred = lr_clf.predict(X_test_cnt_vect)

accuracy = accuracy_score(y_test, pred)
accuracy


# 이번에는 TF-IDF방식의 텍스트 데이터 예측을 해보자

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf_vect = TfidfVectorizer(stop_words="english", ngram_range=(1,2), max_df=300)
tfidf_vect.fit(X_train)
X_train_tfidf_vect = tfidf_vect.transform(X_train)
X_test_tfidf_vect = tfidf_vect.transform(X_test)

lr_clf = LogisticRegression(solver="liblinear")
lr_clf.fit(X_train_cnt_vect, y_train)
pred = lr_clf.predict(X_test_cnt_vect)

accuracy = accuracy_score(y_test, pred)
accuracy

# 그리도 서치를 이용하여 로지스틱 회귀 최적 파라미터를 찾은 이후에 다시 예측해보기
from sklearn.model_selection import GridSearchCV

params = {'C' : [0.01,0.1,1,5,10]}
grid_cv_lr = GridSearchCV(lr_clf, param_grid=params, cv=3, scoring="accuracy", verbose=1)
grid_cv_lr.fit(X_train_tfidf_vect, y_train)
print("최적 파라미터 : ", grid_cv_lr.best_params_)

pred = grid_cv_lr.predict(X_test_tfidf_vect)
accuracy = accuracy_score(y_test, pred)
accuracy

# pipeline을 통하여 한 꺼번에 데이터 피쳐 벡터화와 머신러닝 알고리즘 예측 시행. 하이퍼 파라미터도 최적화 수행 가능

from sklearn.pipeline import Pipeline

pipeline = Pipeline([('tfidf_vect',TfidfVectorizer(stop_words='english')),('lr_clf',LogisticRegression())
])

params = {'tfidf_vect__ngram_range' : [(1,1),(1,2),(1,3)],
          'tfidf_vect__max_df' : [100,300,700],
          'lr_clf__C' : [1,5,10]
          }

grid_cv_pipe = GridSearchCV(pipeline, param_grid=params, cv=3, scoring="accuracy", verbose=1)
grid_cv_pipe.fit(X_train, y_train)

pred = grid_cv_pipe.predict(X_test)
