import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

boston = load_boston()
bostonDF = pd.DataFrame(data = boston.data, columns = boston.feature_names)
bostonDF['PRICE'] = boston.target

# Visualizing all feature's effect to housing prices at each part of the graphs

# number of graphs : 2 * 4 = total 8 graphs
fig, axs = plt.subplots(figsize=(16,8), ncols=4, nrows=2)

lm_features = ['RM','ZN','INDUS','NOX','AGE','PTRATIO','LSTAT','RAD']
for i, feature in enumerate(lm_features):
  row = int(i/4)
  col = i%4

  # regplot method in seaborn module indicate scatters of data and regression line also.
  sns.regplot(x=feature, y='PRICE', data=bostonDF, ax=axs[row][col])

y_target=bostonDF['PRICE']
X_data = bostonDF.drop('PRICE', axis=1, inplace=False)

X_train, X_test, y_train, y_test = train_test_split(X_data, y_target, test_size=0.3)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_preds = lr.predict(X_test)
mse = mean_squared_error(y_test, y_preds)
rmse = np.sqrt(mse)

print("MSE : ",mse)
print("RMSE : ", rmse)
print("Variance Score : ", r2_score(y_test, y_preds))

print("intercept : ", lr.intercept_)
print("reg coefficient : ", lr.coef_)

# Sorting all regression coefficient in descending order
coeff = pd.Series(data=lr.coef_, index=X_data.columns)
coeff.sort_values(ascending=False)


# Measuring MSE, RMSE by cross-validation using cross_val_score

from sklearn.model_selection import cross_val_score

y_target = bostonDF['PRICE']
X_data = bostonDF.drop(['PRICE'], axis=1, inplace=False)
lr = LinearRegression()

neg_mse_scores = cross_val_score(lr, X_data, y_target, scoring="neg_mean_squared_error", cv=5)
rmse_scores = np.sqrt(-1 * neg_mse_scores)
avg_rmse = np.mean(rmse_scores)

print("Each test case's MSE : ", -1*neg_mse_scores)
print("Each test case's RMSE : ", np.sqrt(-1*neg_mse_scores))
print("Mean RMSE : ", avg_rmse)
