import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
from sklearn.datasets import load_boston
import warnings
warnings.filterwarnings('ignore')

%matplotlib inline

def get_linear_reg_eval(model_name, params=None, X_data_n=None, y_target_n=None, verbose=True, return_coeff=True):
  coeff_df = pd.DataFrame()
  if verbose : print("#####", model_name, "#####")
  for param in params:
    if model_name == "Ridge" : model = Ridge(alpha=param)
    elif model_name == "Lasso" : model = Lasso(alpha=param)
    elif model_name == "ElasticNet" : model = ElasticNet(alpha=param, l1_ratio=0.7)
    neg_mse_scores = cross_val_score(model, X_data_n, y_target_n, scoring="neg_mean_squared_error", cv=5)
    avg_rmse = np.mean(np.sqrt(-1 * neg_mse_scores))
    print("alpha가 %f일 때의 5폴드 세트의 평균 RMSE : %f"%(param, avg_rmse))
    model.fit(X_data_n, y_target_n)
    if return_coeff:
      coeff = pd.Series(data=model.coef_, index=X_data_n.columns)
      colname="alpha : " + str(param)
      coeff_df[colname] = coeff

  return coeff_df

boston = load_boston()
X_data = pd.DataFrame(data = boston.data, columns = boston.feature_names)
y_target = boston.target

alphas = [0.07, 0.1, 0.5, 1, 3]
coeff_lasso_df = get_linear_reg_eval('Lasso',params=alphas, X_data_n = X_data, y_target_n = y_target)
